diff --git a/discover/gpu_info_vulkan.c b/discover/gpu_info_vulkan.c
index e868dcc..57d32ae 100644
--- a/discover/gpu_info_vulkan.c
+++ b/discover/gpu_info_vulkan.c
@@ -1,8 +1,12 @@
 #include "gpu_info_vulkan.h"
 
+#include <inttypes.h>
 #include <string.h>
 
 int check_perfmon(vk_handle_t* rh) {
+#ifdef __ANDROID__
+  return 0;
+#endif
 #ifdef __linux__
   cap_t caps;
   const cap_value_t cap_list[1] = {CAP_PERFMON};
@@ -175,8 +179,9 @@ void vk_check_vram(vk_handle_t rh, int i, mem_info_t *resp) {
   (*rh.vkGetPhysicalDeviceProperties)(devices[i], &properties);
   int supports_budget = support_memory_budget(&rh, devices[i]);
   if (!supports_budget) {
-    resp->err = strdup("device does not support memory budget");
-    return;
+    //resp->err = strdup("device does not support memory budget");
+    //return;
+    LOG(rh.verbose, "device does not support memory budget\n");
   }
   if (properties.deviceType == VK_PHYSICAL_DEVICE_TYPE_CPU) {
     resp->err = strdup("device is a CPU");
@@ -213,6 +218,41 @@ void vk_check_vram(vk_handle_t rh, int i, mem_info_t *resp) {
   resp->major = VK_API_VERSION_MAJOR(properties.apiVersion);
   resp->minor = VK_API_VERSION_MINOR(properties.apiVersion);
   resp->patch = VK_API_VERSION_PATCH(properties.apiVersion);
+
+  LOG(rh.verbose, "total: %d\n", resp->total);
+  LOG(rh.verbose, "free:  %d\n", resp->free);
+  //if (resp->free <= 1) {
+    LOG(rh.verbose, "fallback to detect meminfo available memory\n");
+    uint64_t available_memory = 0;
+    FILE* meminfo_file = fopen("/proc/meminfo", "r");
+    if (meminfo_file != NULL) {
+      char* line = NULL;
+      size_t linelen = 0;
+      uint64_t available = 0;
+      char units = '\0';
+      while (getline(&line, &linelen, meminfo_file) != -1) {
+        int fields_parsed = sscanf(line, "MemAvailable: %" SCNu64 " %cB", &available, &units);
+        if (fields_parsed >= 1) {
+          break;
+        }
+      }
+    }
+    uint64_t multiplier = 1;
+    switch (units) {
+      case 'g':
+      case 'G': multiplier = 1024*1024*1024;
+      case 'm':
+      case 'M': multiplier = 1024*1024;
+      case 'k':
+      case 'K': multiplier = 1024;
+    }
+    resp->free = available_memory * multiplier;
+  //}
+  LOG(rh.verbose, "total: %d\n", resp->total);
+  LOG(rh.verbose, "free:  %d\n", resp->free);
+  fclose(meminfo_file);
+  free(line);
+  line = NULL;
 }
 
 void vk_release(vk_handle_t rh) {
