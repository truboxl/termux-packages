diff -uNr ninja-1.12.0/configure.py ninja-1.11.1/configure.py
--- ninja-1.12.0/configure.py	2024-04-12 00:44:05.000000000 +0800
+++ ninja-1.11.1/configure.py	2022-08-31 03:47:02.000000000 +0800
@@ -1,4 +1,4 @@
-#!/usr/bin/env python3
+#!/usr/bin/env python
 #
 # Copyright 2001 Google Inc. All Rights Reserved.
 #
@@ -302,18 +305,7 @@
 else:
     n.variable('ar', configure_env.get('AR', 'ar'))
 
-def search_system_path(file_name):
-  """Find a file in the system path."""
-  for dir in os.environ['path'].split(';'):
-    path = os.path.join(dir, file_name)
-    if os.path.exists(path):
-      return path
-
-# Note that build settings are separately specified in CMakeLists.txt and
-# these lists should be kept in sync.
 if platform.is_msvc():
-    if not search_system_path('cl.exe'):
-        raise Exception('cl.exe not found. Run again from the Developer Command Prompt for VS')
     cflags = ['/showIncludes',
               '/nologo',  # Don't print startup banner.
               '/Zi',  # Create pdb with debug info.
@@ -328,7 +320,6 @@
               # Disable warnings about ignored typedef in DbgHelp.h
               '/wd4091',
               '/GR-',  # Disable RTTI.
-              '/Zc:__cplusplus',
               # Disable size_t -> int truncation warning.
               # We never have strings or arrays larger than 2**31.
               '/wd4267',
@@ -348,7 +339,6 @@
               '-Wno-unused-parameter',
               '-fno-rtti',
               '-fno-exceptions',
-              '-std=c++11',
               '-fvisibility=hidden', '-pipe',
               '-DNINJA_PYTHON="%s"' % options.with_python]
     if options.debug:
@@ -484,7 +474,7 @@
 def has_re2c():
     try:
         proc = subprocess.Popen(['re2c', '-V'], stdout=subprocess.PIPE)
-        return int(proc.communicate()[0], 10) >= 1503
+        return int(proc.communicate()[0], 10) >= 1103
     except OSError:
         return False
 if has_re2c():
@@ -495,31 +485,20 @@
     n.build(src('depfile_parser.cc'), 're2c', src('depfile_parser.in.cc'))
     n.build(src('lexer.cc'), 're2c', src('lexer.in.cc'))
 else:
-    print("warning: A compatible version of re2c (>= 0.15.3) was not found; "
+    print("warning: A compatible version of re2c (>= 0.11.3) was not found; "
            "changes to src/*.in.cc will not affect your build.")
 n.newline()
 
+n.comment('Core source files all build into ninja library.')
 cxxvariables = []
 if platform.is_msvc():
     cxxvariables = [('pdb', 'ninja.pdb')]
-
-n.comment('Generate a library for `ninja-re2c`.')
-re2c_objs = []
-for name in ['depfile_parser', 'lexer']:
-    re2c_objs += cxx(name, variables=cxxvariables)
-if platform.is_msvc():
-    n.build(built('ninja-re2c.lib'), 'ar', re2c_objs)
-else:
-    n.build(built('libninja-re2c.a'), 'ar', re2c_objs)
-n.newline()
-
-n.comment('Core source files all build into ninja library.')
-objs.extend(re2c_objs)
 for name in ['build',
              'build_log',
              'clean',
              'clparser',
              'debug_flags',
+             'depfile_parser',
              'deps_log',
              'disk_interface',
              'dyndep',
@@ -529,6 +508,7 @@
              'graph',
              'graphviz',
              'json',
+             'lexer',
              'line_printer',
              'manifest_parser',
              'metrics',
@@ -582,6 +562,44 @@
     # build.ninja file.
     n = ninja_writer
 
+n.comment('Tests all build into ninja_test executable.')
+
+objs = []
+if platform.is_msvc():
+    cxxvariables = [('pdb', 'ninja_test.pdb')]
+
+for name in ['build_log_test',
+             'build_test',
+             'clean_test',
+             'clparser_test',
+             'depfile_parser_test',
+             'deps_log_test',
+             'dyndep_parser_test',
+             'disk_interface_test',
+             'edit_distance_test',
+             'graph_test',
+             'json_test',
+             'lexer_test',
+             'manifest_parser_test',
+             'missing_deps_test',
+             'ninja_test',
+             'state_test',
+             'status_test',
+             'string_piece_util_test',
+             'subprocess_test',
+             'test',
+             'util_test']:
+    objs += cxx(name, variables=cxxvariables)
+if platform.is_windows():
+    for name in ['includes_normalize_test', 'msvc_helper_test']:
+        objs += cxx(name, variables=cxxvariables)
+
+ninja_test = n.build(binary('ninja_test'), 'link', objs, implicit=ninja_lib,
+                     variables=[('libs', libs)])
+n.newline()
+all_targets += ninja_test
+
+
 n.comment('Ancillary executables.')
 
 if platform.is_aix() and '-maix64' not in ldflags:

